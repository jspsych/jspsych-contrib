import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from "jspsych";
import Chart, { ChartData } from "chart.js/auto";
import annotationPlugin from "chartjs-plugin-annotation";
import { version } from "../package.json";

Chart.register(annotationPlugin);

const info = <const>{
  name: "plugin-histogram-button-response",
  version: version,
  parameters: {
    /**
     * Optional HTML content displayed above the chart. Useful for prompts or instructions.
     */
    description_text: {
      type: ParameterType.HTML_STRING,
      default: undefined,
    },

    /**
     * Required array of numeric values used to generate the histogram. Values will be binned according to `n_bins`.
     */
    chart_data: {
      type: ParameterType.INT,
      array: true,
      default: undefined,
    },

    /**
     * Number of bins to use for the histogram. Affects the granularity of the distribution.
     */
    n_bins: {
      type: ParameterType.INT,
      default: 10,
    },

    /**
     * Maximum number of ticks shown on the x-axis. Helps control axis readability.
     */
    n_x_labels: {
      type: ParameterType.INT,
      default: 5,
    },

    /**
     * Maximum number of ticks shown on the y-axis.
     */
    n_y_labels: {
      type: ParameterType.INT,
      default: 5,
    },

    /**
     * Fill color used for all histogram bars except the highlighted bin. Accepts any valid CSS color string.
     */
    base_color: {
      type: ParameterType.STRING,
      default: "#02c39a80",
    },

    /**
     * Fill color for the highlighted bin. Accepts any valid CSS color string.
     */
    highlight_color: {
      type: ParameterType.STRING,
      default: "#fee44080",
    },

    /**
     * A numeric value used to determine which bin to highlight. The corresponding bin will be shown in `highlight_color`.
     */
    highlight_score: {
      type: ParameterType.FLOAT,
      default: null,
    },

    /**
     * Label text shown above the highlighted bin as an annotation.
     */
    highlight_label: {
      type: ParameterType.STRING,
      default: null,
    },

    /**
     * Text label for the y-axis.
     */
    y_axis_label: {
      type: ParameterType.STRING,
      default: "",
    },

    /**
     * Text label for the x-axis.
     */
    x_axis_label: {
      type: ParameterType.STRING,
      default: "",
    },

    /**
     * If true, scales the y-axis from 0 to 1 and formats tick labels as percentages.
     */
    y_percent: {
      type: ParameterType.BOOL,
      default: false,
    },

    /**
     * Whether to display the legend beside the chart.
     */
    show_legend: {
      type: ParameterType.BOOL,
      default: false,
    },

    /**
     * Labels for the response buttons. Each entry in the array generates a button.
     */
    choices: {
      type: ParameterType.STRING,
      array: true,
      default: undefined,
    },

    /**
     * A function that returns the HTML for each response button.
     * The function receives the choice text and index. Defaults to a standard jsPsych button.
     */
    button_html: {
      type: ParameterType.FUNCTION,
      default: function (choice: string, choice_index: number) {
        return `<button class="jspsych-btn">${choice}</button>`;
      },
    },
  },

  data: {
    /**
     * Response time in milliseconds, measured from trial start to button click.
     */
    rt: {
      type: ParameterType.INT,
    },

    /**
     * Index (0-based) of the button clicked by the participant.
     */
    response: {
      type: ParameterType.INT,
    },
  },

  citations: "__CITATIONS__",
};

type Info = typeof info;

type TrialResponse = {
  rt: number | null;
  button: number | null;
};

/**
 * **plugin-histogram-chart**
 *
 * The `histogram-button-response` plugin displays a histogram chart and records responses generated by a button click.
 * The chart can be displayed until a response is given, or for a pre-determined amount of time.
 * The trial can be ended automatically if the participant does not respond within a fixed length of time.
 * The button itself can be customized using HTML formatting.
 * The histogram stimulus is generated from a numeric array of data, with optional parameters for setting the number of bins to use.
 * You can also add an annotation to the chart by setting the bin corresponding to a particular score as a different colour, with a corresponding text annotation.
 *
 * This plugin uses [Chart.js](https://www.chartjs.org/) under the hood, and supports features like axis labeling, legend display, and percentage formatting on the y-axis.
 */
class HistogramButtonResponsePlugin implements JsPsychPlugin<Info> {
  static info = info;

  constructor(private jsPsych: JsPsych) {}

  //////////////////////////
  // DOM CREATION HELPERS //
  //////////////////////////

  private createDescription(html: string, display_element: HTMLElement): void {
    const el = document.createElement("div");
    el.innerHTML = html;
    el.style.marginBottom = "20px";
    display_element.appendChild(el);
  }

  private createCanvas(display_element: HTMLElement): HTMLCanvasElement {
    const container = document.createElement("div");
    container.style.width = "600px";
    container.style.height = "400px";
    container.style.margin = "auto";
    display_element.appendChild(container);

    const canvas = document.createElement("canvas");
    canvas.id = "chartCanvas";
    container.appendChild(canvas);

    return canvas;
  }

  private createButtonGroup(
    trial: TrialType<Info>,
    after_response: (choiceIndex: number) => void
  ): HTMLDivElement {
    const group = document.createElement("div");
    group.id = "jspsych-histogram-chart-btngroup";
    group.classList.add("jspsych-btn-group-flex");

    for (const [i, choice] of trial.choices.entries()) {
      group.insertAdjacentHTML("beforeend", trial.button_html(choice, i));
      const button = group.lastChild as HTMLElement;
      button.dataset.choice = i.toString();
      button.addEventListener("click", () => after_response(i));
    }

    return group;
  }

  ///////////////////
  // CHART HELPERS //
  ///////////////////

  private computeHistogram(
    data: number[],
    nBins: number,
    yPercent: boolean,
    highlightScore: number,
    baseColor: string,
    highlightColor: string
  ): {
    binLabels: string[];
    histogramData: number[];
    backgroundColors: string[];
    highlightBinIndex: number;
  } {
    const minValue = Math.min(...data);
    const maxValue = Math.max(...data);
    const binWidth = (maxValue - minValue) / nBins;

    const binLabels: string[] = [];
    const binCounts: number[] = Array(nBins).fill(0);

    for (let i = 0; i < nBins; i++) {
      const binEnd = minValue + (i + 1) * binWidth;
      binLabels.push(`${Math.round(binEnd)}`);
    }

    data.forEach((value) => {
      let binIndex = Math.floor((value - minValue) / binWidth);
      if (binIndex >= nBins) binIndex = nBins - 1;
      binCounts[binIndex]++;
    });

    const histogramData = yPercent
      ? binCounts.map((count) => count / data.length)
      : binCounts;

    let highlightBinIndex = Math.floor((highlightScore - minValue) / binWidth);
    if (highlightBinIndex >= nBins) highlightBinIndex = nBins - 1;

    const backgroundColors = histogramData.map((_, i) =>
      i === highlightBinIndex ? highlightColor : baseColor
    );

    return { binLabels, histogramData, backgroundColors, highlightBinIndex };
  }

  private renderChart(
    canvas: HTMLCanvasElement,
    labels: string[],
    data: number[],
    backgroundColors: string[],
    highlightLabel: string,
    highlightIndex: number,
    trial: TrialType<Info>
  ): void {
    const ctx = canvas.getContext("2d");
    if (!ctx) {
      console.error("Your browser does not support canvas rendering.");
      return;
    }

    const chartData: ChartData<"bar", number[]> = {
      labels: labels,
      datasets: [
        {
          data: data,
          backgroundColor: backgroundColors,
        },
      ],
    };

    new Chart(ctx, {
      type: "bar",
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: trial.x_axis_label,
              font: {
                size: 18,
              },
            },
            ticks: {
              maxTicksLimit: trial.n_x_labels,
            },
          },
          y: trial.y_percent
            ? {
                min: 0,
                max: 1,
                title: {
                  display: true,
                  text: trial.y_axis_label,
                  font: {
                    size: 18,
                  },
                },
                ticks: {
                  callback: (value) => `${(+value * 100).toFixed(0)}%`,
                  maxTicksLimit: trial.n_y_labels,
                },
              }
            : {
                title: {
                  display: true,
                  text: trial.y_axis_label,
                },
                ticks: {
                  maxTicksLimit: trial.n_y_labels,
                },
              },
        },
        plugins: {
          legend: {
            position: "right",
            display: trial.show_legend,
          },
          annotation: {
            annotations: {
              highlightLabel: {
                type: "label",
                xValue: labels[highlightIndex],
                yValue: data[highlightIndex],
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "rgba(0,0,0,0)",
                content: [highlightLabel, "â†“"],
                font: {
                  size: 18,
                  weight: "bold",
                },
                position: {
                  x: "center",
                  y: "center",
                },
                yAdjust: -35,
              },
            },
          },
        },
      },
    });
  }

  //////////////////////
  // RESPONSE HELPERS //
  //////////////////////

  private handleResponse(
    choice: number,
    start_time: number,
    response: TrialResponse,
    buttonGroupElement: HTMLElement,
    trial: TrialType<Info>
  ): void {
    const end_time = performance.now();
    response.rt = Math.round(end_time - start_time);
    response.button = choice;

    for (const button of Array.from(buttonGroupElement.children)) {
      button.setAttribute("disabled", "disabled");
    }

    if (trial.response_ends_trial) {
      this.endTrial(response);
    }
  }

  private endTrial(response: TrialResponse): void {
    this.jsPsych.finishTrial({
      rt: response.rt,
      response: response.button,
    });
  }

  //////////////////////////
  // JSPSYCH TRIAL METHOD //
  //////////////////////////

  trial(display_element: HTMLElement, trial: TrialType<Info>): void {
    // clear the display element
    display_element.innerHTML = "";

    // create and append the description text, if provided
    trial.description_text &&
      this.createDescription(trial.description_text, display_element);

    // create container for chart
    const canvas = this.createCanvas(display_element);

    // prepare chart data
    const { binLabels, histogramData, backgroundColors, highlightBinIndex } =
      this.computeHistogram(
        trial.chart_data,
        trial.n_bins,
        trial.y_percent,
        trial.highlight_score,
        trial.base_color,
        trial.highlight_color
      );

    // initialize the Chart.js chart
    this.renderChart(
      canvas,
      binLabels,
      histogramData,
      backgroundColors,
      trial.highlight_label,
      highlightBinIndex,
      trial
    );

    // start time
    const start_time = performance.now();

    // store response
    const response: TrialResponse = {
      rt: null,
      button: null,
    };

    // handle responses by the subject and end trial
    const after_response = (choice: number) => {
      this.handleResponse(
        choice,
        start_time,
        response,
        buttonGroupElement,
        trial
      );
    };

    // display response buttons
    const buttonGroupElement = this.createButtonGroup(trial, after_response);
    display_element.appendChild(buttonGroupElement);
  }
}

export default HistogramButtonResponsePlugin;
